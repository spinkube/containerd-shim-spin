name: Build, Test, and Publish node-installer image

on:
  workflow_call:
    inputs:
      ref:
        description: 'the git ref for the associated workflow'
        type: string
        required: true

jobs:
  build-and-test:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distribution: [kind, minikube, microk8s, k3s]
    outputs:
      release_version: ${{ steps.set_version.outputs.RELEASE_VERSION }}
    steps:
      - uses: actions/checkout@v4

      - name: Set RELEASE_VERSION env var
        id: set_version
        run: |
          if [[ "${{ startsWith(inputs.ref, 'refs/tags/v')}}" == "true" ]]; then
            RELEASE_VERSION=$(echo -n ${{ inputs.ref }} | cut -d '/' -f 3)
          else
            RELEASE_VERSION=$(date +%Y%m%d-%H%M%S)-g$(git rev-parse --short HEAD)
          fi
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_OUTPUT

      - uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract musl artifacts into ./node-installer/.tmp/linux/(amd64|arm64) dir
        run: |
          mkdir -p ./node-installer/.tmp/linux/amd64
          mkdir -p ./node-installer/.tmp/linux/arm64
          for f in ./_artifacts/*/*-x86_64.tar.gz; do tar -xf $f --directory ./node-installer/.tmp/linux/amd64; done
          for f in ./_artifacts/*/*-aarch64.tar.gz; do tar -xf $f --directory ./node-installer/.tmp/linux/arm64; done

      - name: Build node-installer image for testing
        run: make build-dev-installer-image
        working-directory: node-installer

      - uses: helm/kind-action@v1.12.0
        if: matrix.distribution == 'kind'
        with:
          install_only: true

      - uses: medyagh/setup-minikube@v0.0.19
        if: matrix.distribution == 'minikube'
        with:
          start: false
          container-runtime: containerd

      - uses: balchua/microk8s-actions@v0.4.3
        if: matrix.distribution == 'microk8s'

      - name: Run KIND test
        if: matrix.distribution == 'kind'
        run: make test-kind
        working-directory: node-installer

      - name: Run MiniKube test
        if: matrix.distribution == 'minikube'
        run: make test-minikube
        working-directory: node-installer

      - name: Run MicroK8s test
        if: matrix.distribution == 'microk8s'
        run: make test-microk8s
        working-directory: node-installer

      - name: Run K3s test
        if: matrix.distribution == 'k3s'
        run: make test-k3s
        working-directory: node-installer

  publish:
    needs: build-and-test
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract musl artifacts into ./node-installer/.tmp/linux/(amd64|arm64) dir
        run: |
          mkdir -p ./node-installer/.tmp/linux/amd64
          mkdir -p ./node-installer/.tmp/linux/arm64
          for f in ./_artifacts/*/*-x86_64.tar.gz; do tar -xf $f --directory ./node-installer/.tmp/linux/amd64; done
          for f in ./_artifacts/*/*-aarch64.tar.gz; do tar -xf $f --directory ./node-installer/.tmp/linux/arm64; done

      - name: Login to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push node-installer image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/node-installer:${{ needs.build-and-test.outputs.release_version }}
          context: node-installer
          platforms: linux/amd64,linux/arm64

      - name: Clear
        if: always()
        run: |
          rm -f ${HOME}/.docker/config.json
